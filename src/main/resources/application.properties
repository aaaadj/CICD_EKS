# Server Configuration
server.port=8081

# use h2 default
#spring.profiles.active=h2

spring.profiles.active=aws

# Logging Configuration
logging.file.name=logs/application.log
logging.level.org.springframework=INFO
logging.level.com.example=DEBUG

# ThreadPool Configuration for Transaction Processing

# Core pool size (initial number of threads in the pool)
transaction.threadPool.corePoolSize=10

# Max pool size (maximum number of threads in the pool)
transaction.threadPool.maxPoolSize=100

# Queue capacity (maximum number of tasks in the queue before blocking or rejecting)
transaction.threadPool.queueCapacity=500

# Keep-alive seconds (time to wait before closing idle threads)
transaction.threadPool.keepAliveSeconds=60

# transaction retry job time
transaction.scheduled.fixedRate=60000


# Estimated TPS (Transactions Per Second)
# To calculate estimated TPS, the primary limiting factor is the thread pool configuration.
# The system will handle at most `maxPoolSize` transactions per second if each transaction takes ~1 second to process.
# You can adjust the following parameters to scale your transaction processing system:
# 1. `transaction.threadPool.maxPoolSize` - Increasing this value will allow the system to handle more concurrent transactions, improving TPS.
# 2. `transaction.threadPool.queueCapacity` - Increasing this value will allow the system to queue more transactions before rejecting or blocking.
#
# Example:
# If you set `transaction.threadPool.maxPoolSize=100`, the system can handle up to 100 transactions per second in ideal conditions, assuming single code run 1s and there is no other bottlenecks.